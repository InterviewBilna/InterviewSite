<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<!-- question: 0  -->
  <question type="category">
    <category>
        <text>$system$/DemoQuestions</text>

    </category>
  </question>

<!-- question: 835  -->
  <question type="coderunner">
    <name>
      <text>C sqr</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>Write a C function with signature <i>int sqr(int n)</i>&nbsp;that returns the square of its parameter <i>n</i>.</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text><![CDATA[<p><br></p><p>&nbsp; &nbsp;&nbsp;</p>]]></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunner_type>c_function</coderunner_type>
    <prototype_type>0</prototype_type>
    <all_or_nothing>1</all_or_nothing>
    <penalty_regime>10, 20, ...</penalty_regime>
    <show_source>0</show_source>
    <answerbox_lines>8</answerbox_lines>
    <answerbox_columns>60</answerbox_columns>
    <use_ace>1</use_ace>
    <showtest>1</showtest>
    <showstdin>1</showstdin>
    <showexpected>1</showexpected>
    <showoutput>1</showoutput>
    <showmark>0</showmark>
    <combinator_template><![CDATA[#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <stdbool.h>
#define SEPARATOR "#<ab@17943918#@>#"

{{ STUDENT_ANSWER }}

int main() {
{% for TEST in TESTCASES %}
   {
    {{ TEST.testcode }};
   }
    {% if not loop.last %}printf("%s\n", SEPARATOR);{% endif %}
{% endfor %}
    return 0;
}]]></combinator_template>
    <test_splitter_re><![CDATA[|#<ab@17943918#@>#
|ms]]></test_splitter_re>
    <enable_combinator>1</enable_combinator>
    <per_test_template><![CDATA[#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <stdbool.h>

{{ STUDENT_ANSWER }}

int main() {
    {{ TEST.testcode }};
    return 0;
}]]></per_test_template>
    <language>C</language>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandbox_params></sandbox_params>
    <template_params></template_params>
    <testcases>
      <testcase useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[printf("%d\n", sqr(-11))]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>121</text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[printf("%d\n", sqr(9))]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>81</text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[printf("%d\n", sqr(-1000))]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>1000000</text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[printf("%d\n", sqr(0))]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>0</text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[printf("%d\n", sqr(8))]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>64</text>
      </expected>
      <display>
                <text>HIDE</text>
      </display>
    </testcase>
    </testcases>
  </question>

<!-- question: 837  -->
  <question type="coderunner">
    <name>
      <text>C string lengths</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>Write a C function with signature <i>void printStringLengths(int numStrings, char **strings) </i>that takes an array of strings <i>strings</i>&nbsp;of length <i>numStrings &gt;= 0</i>&nbsp;and prints the length of each string, one length per line.</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunner_type>c_function</coderunner_type>
    <prototype_type>0</prototype_type>
    <all_or_nothing>1</all_or_nothing>
    <penalty_regime>10, 20, ...</penalty_regime>
    <show_source>0</show_source>
    <answerbox_lines>12</answerbox_lines>
    <answerbox_columns>90</answerbox_columns>
    <use_ace>1</use_ace>
    <showtest>1</showtest>
    <showstdin>1</showstdin>
    <showexpected>1</showexpected>
    <showoutput>1</showoutput>
    <showmark>0</showmark>
    <combinator_template><![CDATA[#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <stdbool.h>
#define SEPARATOR "#<ab@17943918#@>#"

{{ STUDENT_ANSWER }}

int main() {
{% for TEST in TESTCASES %}
   {
    {{ TEST.testcode }};
   }
    {% if not loop.last %}printf("%s\n", SEPARATOR);{% endif %}
{% endfor %}
    return 0;
}]]></combinator_template>
    <test_splitter_re><![CDATA[|#<ab@17943918#@>#
|ms]]></test_splitter_re>
    <enable_combinator>1</enable_combinator>
    <per_test_template><![CDATA[#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <stdbool.h>

{{ STUDENT_ANSWER }}

int main() {
    {{ TEST.testcode }};
    return 0;
}]]></per_test_template>
    <language>C</language>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandbox_params></sandbox_params>
    <template_params></template_params>
    <testcases>
      <testcase useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[char *s[4] = {"x", "yy", "zzz", "1234"};
printStringLengths(4, s)]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>1
2
3
4</text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[char *s[1] = {"12345678910"};
printStringLengths(1, s);]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>11</text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>printStringLengths(0, NULL);</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text></text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[char *ss[2] = {"", ""};
printStringLengths(2, ss);]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>0
0</text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[char *ss[2] = {"x", "y"};
printStringLengths(2, ss);]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>1
1</text>
      </expected>
      <display>
                <text>HIDE</text>
      </display>
    </testcase>
    </testcases>
  </question>

<!-- question: 848  -->
  <question type="coderunner">
    <name>
      <text>Java Demo Class Question</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>Write a Java class Bod, representing a person, to satisfy the following requirements:</p><p></p><ol><li>There is a constructor that takes two parameters: a <i>String </i>name, being the name of the person, and an <i>int</i>&nbsp;age, being the age of the person.</li><li>There are getter methods <i>getName()</i>&nbsp;and <i>getAge() </i>that return the person's name and age respectively.</li><li>This is a method <i>growOlder(nYears)</i>&nbsp;that increments the persons age by <i>nYears</i>&nbsp;(an integer).</li></ol><p></p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunner_type>java_class</coderunner_type>
    <prototype_type>0</prototype_type>
    <all_or_nothing>1</all_or_nothing>
    <penalty_regime></penalty_regime>
    <show_source>0</show_source>
    <answerbox_lines>25</answerbox_lines>
    <answerbox_columns>80</answerbox_columns>
    <use_ace>1</use_ace>
    <showtest>1</showtest>
    <showstdin>1</showstdin>
    <showexpected>1</showexpected>
    <showoutput>1</showoutput>
    <showmark>0</showmark>
    <combinator_template></combinator_template>
    <test_splitter_re></test_splitter_re>
    <enable_combinator>0</enable_combinator>
    <per_test_template>{{ STUDENT_ANSWER | replace({'public class ': 'class '}) }}

public class __Tester__ {

    public static void main(String[] args) {
        __Tester__ main = new __Tester__();
        main.runTests();
    }

    public void runTests() {
        {{ TEST.testcode }};
    }
}
</per_test_template>
    <language>Java</language>
    <sandbox></sandbox>
    <grader>EqualityGrader</grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb>2000</memlimitmb>
    <sandbox_params></sandbox_params>
    <template_params></template_params>
    <testcases>
      <testcase useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[Bod bod = new Bod("James", 23);
System.out.println(bod.getName() + " " + bod.getAge());
bod.growOlder(13);
System.out.println(bod.getName() + " " + bod.getAge());]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>James 23
James 36</text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[Bod bod = new Bod("Angus McGurkinshaw", 99);
System.out.println(bod.getName() + " " + bod.getAge());
bod.growOlder(2);
System.out.println(bod.getName() + " " + bod.getAge());]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>Angus McGurkinshaw 99
Angus McGurkinshaw 101</text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[Bod bod = new Bod("Angus McGurkinshaw", 99);
System.out.println(bod.getName() + " " + bod.getAge());
bod.growOlder(3);
System.out.println(bod.getName() + " " + bod.getAge());]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>Angus McGurkinshaw 99
Angus McGurkinshaw 102</text>
      </expected>
      <display>
                <text>HIDE</text>
      </display>
    </testcase>
    </testcases>
  </question>

<!-- question: 849  -->
  <question type="coderunner">
    <name>
      <text>Java file reader</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>Write a Java program&nbsp;that reads and processes standard input. Each input line is a sequence of one or more integers, separated by commas. For each line of input the program should print the total of the integers in the input line. The program terminates if a blank line is read or if end-of-file occurs.</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunner_type>java_program</coderunner_type>
    <prototype_type>0</prototype_type>
    <all_or_nothing>1</all_or_nothing>
    <penalty_regime></penalty_regime>
    <show_source>0</show_source>
    <answerbox_lines>25</answerbox_lines>
    <answerbox_columns>80</answerbox_columns>
    <use_ace>1</use_ace>
    <showtest>1</showtest>
    <showstdin>1</showstdin>
    <showexpected>1</showexpected>
    <showoutput>1</showoutput>
    <showmark>0</showmark>
    <combinator_template></combinator_template>
    <test_splitter_re></test_splitter_re>
    <enable_combinator>0</enable_combinator>
    <per_test_template>{{ STUDENT_ANSWER }}</per_test_template>
    <language>Java</language>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb>2000</memlimitmb>
    <sandbox_params></sandbox_params>
    <template_params></template_params>
    <testcases>
      <testcase useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>10,20,30
99

shouldn't get here</text>
      </stdin>
      <expected>
                <text>60
99</text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>10,20,30
99</text>
      </stdin>
      <expected>
                <text>60
99</text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>1,2,3,4,5,6,7,8,9,10,11,12</text>
      </stdin>
      <expected>
                <text>78</text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>
[NB: line above is empty!]</text>
      </stdin>
      <expected>
                <text></text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>1</text>
      </stdin>
      <expected>
                <text>1</text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>7</text>
      </stdin>
      <expected>
                <text>7</text>
      </expected>
      <display>
                <text>HIDE</text>
      </display>
    </testcase>
    </testcases>
  </question>

<!-- question: 850  -->
  <question type="coderunner">
    <name>
      <text>Java sum of squares</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>Write a Java method with signature&nbsp;<tt>int sumSquares(int[] data) </tt>that returns the sum of the squares of the elements in a given array of integers. The method must return 0 if the array is empty.</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunner_type>java_method</coderunner_type>
    <prototype_type>0</prototype_type>
    <all_or_nothing>1</all_or_nothing>
    <penalty_regime></penalty_regime>
    <show_source>0</show_source>
    <answerbox_lines>8</answerbox_lines>
    <answerbox_columns>80</answerbox_columns>
    <use_ace>1</use_ace>
    <showtest>1</showtest>
    <showstdin>1</showstdin>
    <showexpected>1</showexpected>
    <showoutput>1</showoutput>
    <showmark>0</showmark>
    <combinator_template><![CDATA[public class Main {
    static String SEPARATOR = "#<ab@17943918#@>#";
    {{ STUDENT_ANSWER }}

    public static void main(String[] args) {
        Main main = new Main();
        main.runTests();
    }

    public void runTests() {
{% for testCase in TESTCASES %}
    {{ testCase.testcode }};
    {% if not loop.last %}
    System.out.println(SEPARATOR);
    {% endif %}
{% endfor %}
    }
}]]></combinator_template>
    <test_splitter_re><![CDATA[|#<ab@17943918#@>#
|ms]]></test_splitter_re>
    <enable_combinator>1</enable_combinator>
    <per_test_template>public class Main {

    {{ STUDENT_ANSWER }}

    public static void main(String[] args) {
        Main main = new Main();
        main.runTests();
    }

    public void runTests() {
        {{ TEST.testcode }};
    }
}</per_test_template>
    <language>Java</language>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb>2000</memlimitmb>
    <sandbox_params></sandbox_params>
    <template_params></template_params>
    <testcases>
      <testcase useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>System.out.println(sumSquares(new int[] {2, 3, 5}));</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>38</text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>System.out.println(sumSquares(new int[] {-2, -3, 4, 1}));</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>30</text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>System.out.println(sumSquares(new int[] {}));</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>0</text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>System.out.println(sumSquares(new int[] {100}));</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>10000</text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>System.out.println(sumSquares(new int[] {-9}));</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>81</text>
      </expected>
      <display>
                <text>HIDE</text>
      </display>
    </testcase>
    </testcases>
  </question>

<!-- question: 832  -->
  <question type="coderunner">
    <name>
      <text>Process name</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>Write a python3 program that uses the <i>input()</i>&nbsp;function to read a person's name from "standard input" (e.g. the keyboard), and then prints a "Welcome to CodeRunner" message incorporating that name as shown in the example table below.</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunner_type>python3</coderunner_type>
    <prototype_type>0</prototype_type>
    <all_or_nothing>1</all_or_nothing>
    <penalty_regime>10, 20, ...</penalty_regime>
    <show_source>0</show_source>
    <answerbox_lines>8</answerbox_lines>
    <answerbox_columns>70</answerbox_columns>
    <use_ace>1</use_ace>
    <showtest>1</showtest>
    <showstdin>1</showstdin>
    <showexpected>1</showexpected>
    <showoutput>1</showoutput>
    <showmark>0</showmark>
    <combinator_template><![CDATA[{{ STUDENT_ANSWER }}

__student_answer__ = """{{ STUDENT_ANSWER | e('py') }}"""

SEPARATOR = "#<ab@17943918#@>#"

{% for TEST in TESTCASES %}
{{ TEST.testcode }}
{% if not loop.last %}
print(SEPARATOR)
{% endif %}
{% endfor %}]]></combinator_template>
    <test_splitter_re><![CDATA[|#<ab@17943918#@>#
|ms]]></test_splitter_re>
    <enable_combinator>1</enable_combinator>
    <per_test_template><![CDATA[{{STUDENT_ANSWER}}

__student_answer__ = """{{ STUDENT_ANSWER | e('py') }}"""

{{TEST.testcode}}]]></per_test_template>
    <language>python3</language>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandbox_params></sandbox_params>
    <template_params></template_params>
    <testcases>
      <testcase useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>Angus McGurkinshaw</text>
      </stdin>
      <expected>
                <text>Welcome to CodeRunner, Angus McGurkinshaw. May the force be with you.</text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>Pope Pius IX</text>
      </stdin>
      <expected>
                <text>Welcome to CodeRunner, Pope Pius IX. May the force be with you.</text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>Rumplestiltskin</text>
      </stdin>
      <expected>
                <text>Welcome to CodeRunner, Rumplestiltskin. May the force be with you.</text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
    </testcases>
  </question>

<!-- question: 833  -->
  <question type="coderunner">
    <name>
      <text>Python loop program</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>Write a Python3 program that repeatedly uses the <i>input()</i>&nbsp;function without a prompt string to read a person's name from standard input and prints a corresponding welcome message until the input line is the string <i>bye</i>, at which point the program exits. The test for <i>bye</i> should be case-insensitive. The welcome message depends only on the first name and whether or not that first name is&nbsp;<i>Richard</i>&nbsp;(case insensitively) as shown in the example table below. The first name is defined to be all text up to but not including the first space or the entire line if no space is present in the line. You may assume the line <i>bye</i>&nbsp;is always present in the input.</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunner_type>python3</coderunner_type>
    <prototype_type>0</prototype_type>
    <all_or_nothing>1</all_or_nothing>
    <penalty_regime>10, 20, ...</penalty_regime>
    <show_source>0</show_source>
    <answerbox_lines>18</answerbox_lines>
    <answerbox_columns>100</answerbox_columns>
    <use_ace>1</use_ace>
    <showtest>1</showtest>
    <showstdin>1</showstdin>
    <showexpected>1</showexpected>
    <showoutput>1</showoutput>
    <showmark>0</showmark>
    <combinator_template><![CDATA[{{ STUDENT_ANSWER }}

__student_answer__ = """{{ STUDENT_ANSWER | e('py') }}"""

SEPARATOR = "#<ab@17943918#@>#"

{% for TEST in TESTCASES %}
{{ TEST.testcode }}
{% if not loop.last %}
print(SEPARATOR)
{% endif %}
{% endfor %}]]></combinator_template>
    <test_splitter_re><![CDATA[|#<ab@17943918#@>#
|ms]]></test_splitter_re>
    <enable_combinator>1</enable_combinator>
    <per_test_template><![CDATA[{{STUDENT_ANSWER}}

__student_answer__ = """{{ STUDENT_ANSWER | e('py') }}"""

{{TEST.testcode}}]]></per_test_template>
    <language>python3</language>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandbox_params></sandbox_params>
    <template_params></template_params>
    <testcases>
      <testcase useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>Angus McGurkinshaw III
Richard McClashan
Richardo McClashan
McClashan Richard
RICHARD
Peter Potter
Bye
More rubbish</text>
      </stdin>
      <expected>
                <text>Hi Angus
Welcome Richard
Hi Richardo
Hi McClashan
Welcome RICHARD
Hi Peter</text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>Bye</text>
      </stdin>
      <expected>
                <text></text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>x

y
richarD Blogg
101 Dalmations
BYE</text>
      </stdin>
      <expected>
                <text>Hi x
Hi
Hi y
Welcome richarD
Hi 101

</text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>Bonk
Bye</text>
      </stdin>
      <expected>
                <text>Hi Bonk</text>
      </expected>
      <display>
                <text>HIDE</text>
      </display>
    </testcase>
    </testcases>
  </question>

<!-- question: 836  -->
  <question type="coderunner">
    <name>
      <text>Reversing lines</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>Write a C program that repeatedly reads a line from standard input and prints it in reverse until end-of-file occurs. You may assume lines are at most 80 characters in length and that lines are terminated by newline characters ('\n') with no return characters present.</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunner_type>c_program</coderunner_type>
    <prototype_type>0</prototype_type>
    <all_or_nothing>1</all_or_nothing>
    <penalty_regime></penalty_regime>
    <show_source>0</show_source>
    <answerbox_lines>20</answerbox_lines>
    <answerbox_columns>80</answerbox_columns>
    <use_ace>1</use_ace>
    <showtest>1</showtest>
    <showstdin>1</showstdin>
    <showexpected>1</showexpected>
    <showoutput>1</showoutput>
    <showmark>0</showmark>
    <combinator_template></combinator_template>
    <test_splitter_re></test_splitter_re>
    <enable_combinator>0</enable_combinator>
    <per_test_template>{{ STUDENT_ANSWER }}</per_test_template>
    <language>C</language>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandbox_params></sandbox_params>
    <template_params></template_params>
    <testcases>
      <testcase useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>Line 1
Line 2
Another line
Boring!</text>
      </stdin>
      <expected>
                <text>1 eniL
2 eniL
enil rehtonA
!gniroB</text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>abcdefghijklmnopqrstuvwxyz012345

Yes, that was a blank line there</text>
      </stdin>
      <expected>
                <text>543210zyxwvutsrqponmlkjihgfedcba

ereht enil knalb a saw taht ,seY</text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>wow</text>
      </stdin>
      <expected>
                <text>wow</text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text>oxen
nexo</text>
      </stdin>
      <expected>
                <text>nexo
oxen</text>
      </expected>
      <display>
                <text>HIDE</text>
      </display>
    </testcase>
      <testcase useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text></text>
      </testcode>
      <stdin>
                <text><![CDATA[~!@#$%^&*()_]]></text>
      </stdin>
      <expected>
                <text><![CDATA[_)(*&^%$#@!~]]></text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
    </testcases>
  </question>

<!-- question: 823  -->
  <question type="coderunner">
    <name>
      <text>sqr function</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>Write a Python3 function <i>sqr(n) </i>that returns the square of its numeric parameter <i>n</i>.</p><p>For those who don't know Python, one possible answer is:<br></p>
<pre style="background-color:#DDD">def sqr(n):
    return n * n</pre><p>Copy that answer into the answer box and click <i>Check</i>&nbsp;to see how CodeRunner questions behave. Then try changing the answer in various ways and re-checking.</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text><![CDATA[<p>-3<br></p>]]></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunner_type>python3</coderunner_type>
    <prototype_type>0</prototype_type>
    <all_or_nothing>1</all_or_nothing>
    <penalty_regime>10, 20, ...</penalty_regime>
    <show_source>0</show_source>
    <answerbox_lines>5</answerbox_lines>
    <answerbox_columns>70</answerbox_columns>
    <use_ace>1</use_ace>
    <showtest>1</showtest>
    <showstdin>1</showstdin>
    <showexpected>1</showexpected>
    <showoutput>1</showoutput>
    <showmark>0</showmark>
    <combinator_template><![CDATA[{{ STUDENT_ANSWER }}

__student_answer__ = """{{ STUDENT_ANSWER | e('py') }}"""

SEPARATOR = "#<ab@17943918#@>#"

{% for TEST in TESTCASES %}
{{ TEST.testcode }}
{% if not loop.last %}
print(SEPARATOR)
{% endif %}
{% endfor %}]]></combinator_template>
    <test_splitter_re><![CDATA[|#<ab@17943918#@>#
|ms]]></test_splitter_re>
    <enable_combinator>1</enable_combinator>
    <per_test_template><![CDATA[{{STUDENT_ANSWER}}

__student_answer__ = """{{ STUDENT_ANSWER | e('py') }}"""

{{TEST.testcode}}]]></per_test_template>
    <language>python3</language>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandbox_params></sandbox_params>
    <template_params></template_params>
    <testcases>
      <testcase useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>print(sqr(-3))</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>9</text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>print(sqr(11))</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>121</text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>print(sqr(-4))</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>16</text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>print(sqr(0))</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>0</text>
      </expected>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase useasexample="0" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text>print(sqr(-100))</text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>10000</text>
      </expected>
      <display>
                <text>HIDE</text>
      </display>
    </testcase>
    </testcases>
  </question>

<!-- question: 834  -->
  <question type="description">
    <name>
      <text>C introduction</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<h3>2. C Examples</h3><p>This page demonstrates some simple C questions. There are two built-in C question types: <i>C function</i>&nbsp;and <i>C program</i>. For <i>C function</i>&nbsp;questions the student is asked to write a C function to some specification (plus possible additional support functions). Tests generally consist of a call to <i>printf</i>&nbsp;with a call to the student's function as the argument, though multiline tests are possible too. The tests are wrapped into a (hidden) main function. &nbsp;<i>C program</i>&nbsp;questions require the student to write a program to some specification, usually involving reading data from standard input or from a file and producing specified output.</p><p>The C compiler is currently set to accept C11 with -Wall and -Werror, so any warnings cause the submission to be marked wrong.</p><p><span>With C function questions&nbsp;</span><i>stdio.h</i>, <i>stdlib.h</i>, <i>ctype.h</i> and <i>string.h</i> are automatically included but no files are included with C program questions.&nbsp;</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>0.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
  </question>

<!-- question: 822  -->
  <question type="description">
    <name>
      <text>Introduction</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<h2>Welcome to CodeRunner</h2><p>This quiz demonstrates some of the built-in question types in Python (questions 1 through 3), C (questions 4 through 6) and Java (questions 7 through 9).Only simple questions appear in this quiz. A quiz demonstrating more-advanced capabilities of CodeRunner will be provided in due course.</p><h3>1. Python Examples</h3><p>The quiz is broken into pages according to question type; this first block contains only Python3 questions. For this simple type of question the program that's run consists of the student's answer followed by the test code.</p><p>Try your luck!</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>0.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
  </question>

<!-- question: 851  -->
  <question type="description">
    <name>
      <text>Java questions</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>There are three different built-in Java question types:</p><p></p><ol><li>Write a method. Here the student is invited to write a stand-alone method (essentially a function) to perform some simple task with its parameters, either printing something or returning some value. This sort of question is useful for rank beginners, who are still learning basic Java syntax and control structures.</li><li>Write a class. Here the student writes a single class that satisfies some specification.</li><li>Write a program. Here the student writes an entire program in the form of a public&nbsp;class with a <i>public static void main </i>method, which performs some computation (usually involving standard input or a specified file).</li></ol>One of each of these questions is given below.<p></p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>0.0000000</defaultgrade>
    <penalty>0.0000000</penalty>
    <hidden>0</hidden>
  </question>

</quiz>