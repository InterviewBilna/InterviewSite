<?xml version="1.0" encoding="UTF-8"?>
<!-- This file defines some University of Canterbury specific question types -->
<quiz>
<!-- question: 0  -->
  <question type="category">
    <category>
        <text>$system$/UOC_CR_PROTOTYPES</text>

    </category>
  </question>

<!-- question: 14978  -->
  <question type="coderunner">
    <name>
      <text>UOC_PROTOTYPE_c_full_main_tests</text>
    </name>
    <questiontext format="moodle_auto_format">
      <text>Used for C questions where the student writes global declarations (types, functions etc) and each test case contains a complete main function that follows the student code.</text>
    </questiontext>
    <generalfeedback format="moodle_auto_format">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunner_type>c_full_main_tests</coderunner_type>
    <prototype_type>2</prototype_type>
    <all_or_nothing>1</all_or_nothing>
    <penalty_regime></penalty_regime>
    <show_source>0</show_source>
    <answerbox_lines>18</answerbox_lines>
    <answerbox_columns>100</answerbox_columns>
    <use_ace>1</use_ace>
    <result_columns></result_columns>
    <answer></answer>
    <combinator_template></combinator_template>
    <test_splitter_re></test_splitter_re>
    <enable_combinator>0</enable_combinator>
    <per_test_template><![CDATA[#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <stdbool.h>
{{STUDENT_ANSWER}}

{{ TEST.testcode }}]]></per_test_template>
    <language>C</language>
    <ace_lang></ace_lang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandbox_params></sandbox_params>
    <template_params></template_params>
    <testcases>
    </testcases>
  </question>


<!-- question: 14980  -->
  <question type="coderunner">
    <name>
      <text>UOC_PROTOTYPE_matlab_function</text>
    </name>
    <questiontext format="moodle_auto_format">
      <text>Used for Matlab function questions. Student code must be a function declaration, which is tested with each testcase.</text>
    </questiontext>
    <generalfeedback format="moodle_auto_format">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunner_type>matlab_function</coderunner_type>
    <prototype_type>2</prototype_type>
    <all_or_nothing>1</all_or_nothing>
    <penalty_regime></penalty_regime>
    <show_source>0</show_source>
    <answerbox_lines>18</answerbox_lines>
    <answerbox_columns>100</answerbox_columns>
    <use_ace>1</use_ace>
    <result_columns></result_columns>
    <answer></answer>
    <combinator_template><![CDATA[function tester()
   {% for TEST in TESTCASES %}
   {{ TEST.testcode }};
   {% if not loop.last %}
   disp('#<ab@17943918#@>#');
{% endif %}
{% endfor %}
   quit();
end

{{ STUDENT_ANSWER }}]]></combinator_template>
    <test_splitter_re><![CDATA[|#<ab@17943918#@>#
|ms]]></test_splitter_re>
    <enable_combinator>1</enable_combinator>
    <per_test_template>function tester()
  {{ TEST.testcode }};
  quit();
end

{{ STUDENT_ANSWER }}</per_test_template>
    <language>matlab</language>
    <ace_lang></ace_lang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs>10</cputimelimitsecs>
    <memlimitmb>0</memlimitmb>
    <sandbox_params></sandbox_params>
    <template_params></template_params>
    <testcases>
    </testcases>
  </question>

<!-- question: 12336  -->
  <question type="coderunner">
    <name>
      <text>UOC_PROTOTYPE_nodejs</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>A generic nodejs question in which the student answer precedes the tests.</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <coderunner_type>nodejs</coderunner_type>
    <prototype_type>2</prototype_type>
    <all_or_nothing>1</all_or_nothing>
    <penalty_regime></penalty_regime>
    <show_source>0</show_source>
    <answerbox_lines>18</answerbox_lines>
    <answerbox_columns>100</answerbox_columns>
    <use_ace>1</use_ace>
    <result_columns></result_columns>
    <answer></answer>
    <combinator_template><![CDATA[{{ STUDENT_ANSWER }}

SEPARATOR = "#<ab@17943918#@>#"

{% for TEST in TESTCASES %}
{{ TEST.testcode }}
{% if not loop.last %}
print(SEPARATOR)
{% endif %}
{% endfor %}]]></combinator_template>
    <test_splitter_re><![CDATA[|#<ab@17943918#@>#\n|ms]]></test_splitter_re>
    <enable_combinator>1</enable_combinator>
    <per_test_template>{{STUDENT_ANSWER}}

{{TEST.testcode}}</per_test_template>
    <language>nodejs</language>
    <ace_lang></ace_lang>
    <sandbox></sandbox>
    <grader>EqualityGrader</grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb>1000</memlimitmb>
    <sandbox_params></sandbox_params>
    <template_params></template_params>
    <testcases>
    </testcases>
  </question>


<!-- question: 14977  -->
  <question type="coderunner">
    <name>
      <text>UOC_PROTOTYPE_python3_pylint</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>Prototype for a Python3 question that is checked by pylint before being executed. It can take two template parameters:</p>
<ul>
<li>isfunction: if set and true a dummy module docstring will be inserted at the start of the program. This is useful in "write a function" questions.</li>
<li>pylintoptions: this should be a JSON list of strings.</li>
</ul>
<p>For example, the Template parameters string in the question authoring form might be set to</p>
<p>{"isfunction": true, "pylintoptions":["--max-statements=20","--max-args=3"]}</p>
<p>to generate a module docstring at the start and to set the maximum number of statements and arguments for each function to 20 and 3 respectively.</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.1000000</penalty>
    <hidden>0</hidden>
    <coderunner_type>python3_pylint</coderunner_type>
    <prototype_type>2</prototype_type>
    <all_or_nothing>1</all_or_nothing>
    <penalty_regime>0,0,0,0,0,0,10,20,...</penalty_regime>
    <show_source>0</show_source>
    <answerbox_lines>60</answerbox_lines>
    <answerbox_columns>100</answerbox_columns>
    <use_ace>1</use_ace>
    <result_columns></result_columns>
    <answer></answer>
    <combinator_template></combinator_template>
    <test_splitter_re><![CDATA[|#<ab@17943918#@>#|ms]]></test_splitter_re>
    <enable_combinator>0</enable_combinator>
    <per_test_template><![CDATA[__student_answer__ = """{{ STUDENT_ANSWER | e('py') }}"""

import subprocess
import os

def check_code(s):
{% if QUESTION.parameters.isfunction %}
    s = "'''Dummy module docstring'''\n" + s
{% endif %}
    try:
        source = open('source.py', 'w')
        source.write(s)
        source.close()
        env = os.environ.copy()
        env['HOME'] = os.getcwd()
        pylint_opts = []
{% for option in QUESTION.parameters.pylintoptions %}
        pylint_opts.append('{{option}}')
{% endfor %}
        cmd = ['pylint', 'source.py'] + pylint_opts
        result = subprocess.check_output(cmd, stderr=subprocess.STDOUT, env=env)
    except Exception as e:
        result = e.output.decode('utf-8')

    if result.strip():
        print("pylint doesn't approve of your program")
        print(result)
        raise Exception("Submission rejected")

check_code(__student_answer__)

{{ STUDENT_ANSWER }}
{{ TEST.testcode }}]]></per_test_template>
    <language>python3</language>
    <ace_lang></ace_lang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs>30</cputimelimitsecs>
    <memlimitmb>1024</memlimitmb>
    <sandbox_params></sandbox_params>
    <template_params></template_params>
    <testcases>
    </testcases>
  </question>

</quiz>
